// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: coreService/v1/inter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterService_IncrReadCount_FullMethodName = "/coreService.v1.InterService/IncrReadCount"
	InterService_Like_FullMethodName          = "/coreService.v1.InterService/Like"
	InterService_CancelLike_FullMethodName    = "/coreService.v1.InterService/CancelLike"
	InterService_Collect_FullMethodName       = "/coreService.v1.InterService/Collect"
	InterService_CancelCollect_FullMethodName = "/coreService.v1.InterService/CancelCollect"
	InterService_Stat_FullMethodName          = "/coreService.v1.InterService/Stat"
)

// InterServiceClient is the client API for InterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterServiceClient interface {
	IncrReadCount(ctx context.Context, in *IncrReadCountRequest, opts ...grpc.CallOption) (*IncrReadCountResponse, error)
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
	CancelLike(ctx context.Context, in *CancelLikeRequest, opts ...grpc.CallOption) (*CancelLikeResponse, error)
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	CancelCollect(ctx context.Context, in *CancelCollectRequest, opts ...grpc.CallOption) (*CancelCollectResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type interServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterServiceClient(cc grpc.ClientConnInterface) InterServiceClient {
	return &interServiceClient{cc}
}

func (c *interServiceClient) IncrReadCount(ctx context.Context, in *IncrReadCountRequest, opts ...grpc.CallOption) (*IncrReadCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrReadCountResponse)
	err := c.cc.Invoke(ctx, InterService_IncrReadCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeResponse)
	err := c.cc.Invoke(ctx, InterService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) CancelLike(ctx context.Context, in *CancelLikeRequest, opts ...grpc.CallOption) (*CancelLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelLikeResponse)
	err := c.cc.Invoke(ctx, InterService_CancelLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, InterService_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) CancelCollect(ctx context.Context, in *CancelCollectRequest, opts ...grpc.CallOption) (*CancelCollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelCollectResponse)
	err := c.cc.Invoke(ctx, InterService_CancelCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, InterService_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterServiceServer is the server API for InterService service.
// All implementations must embed UnimplementedInterServiceServer
// for forward compatibility.
type InterServiceServer interface {
	IncrReadCount(context.Context, *IncrReadCountRequest) (*IncrReadCountResponse, error)
	Like(context.Context, *LikeRequest) (*LikeResponse, error)
	CancelLike(context.Context, *CancelLikeRequest) (*CancelLikeResponse, error)
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
	CancelCollect(context.Context, *CancelCollectRequest) (*CancelCollectResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	mustEmbedUnimplementedInterServiceServer()
}

// UnimplementedInterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterServiceServer struct{}

func (UnimplementedInterServiceServer) IncrReadCount(context.Context, *IncrReadCountRequest) (*IncrReadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrReadCount not implemented")
}
func (UnimplementedInterServiceServer) Like(context.Context, *LikeRequest) (*LikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedInterServiceServer) CancelLike(context.Context, *CancelLikeRequest) (*CancelLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLike not implemented")
}
func (UnimplementedInterServiceServer) Collect(context.Context, *CollectRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedInterServiceServer) CancelCollect(context.Context, *CancelCollectRequest) (*CancelCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCollect not implemented")
}
func (UnimplementedInterServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedInterServiceServer) mustEmbedUnimplementedInterServiceServer() {}
func (UnimplementedInterServiceServer) testEmbeddedByValue()                      {}

// UnsafeInterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterServiceServer will
// result in compilation errors.
type UnsafeInterServiceServer interface {
	mustEmbedUnimplementedInterServiceServer()
}

func RegisterInterServiceServer(s grpc.ServiceRegistrar, srv InterServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterService_ServiceDesc, srv)
}

func _InterService_IncrReadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrReadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).IncrReadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_IncrReadCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).IncrReadCount(ctx, req.(*IncrReadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).CancelLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_CancelLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).CancelLike(ctx, req.(*CancelLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_CancelCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).CancelCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_CancelCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).CancelCollect(ctx, req.(*CancelCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterService_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterService_ServiceDesc is the grpc.ServiceDesc for InterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreService.v1.InterService",
	HandlerType: (*InterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrReadCount",
			Handler:    _InterService_IncrReadCount_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _InterService_Like_Handler,
		},
		{
			MethodName: "CancelLike",
			Handler:    _InterService_CancelLike_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _InterService_Collect_Handler,
		},
		{
			MethodName: "CancelCollect",
			Handler:    _InterService_CancelCollect_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _InterService_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coreService/v1/inter.proto",
}
