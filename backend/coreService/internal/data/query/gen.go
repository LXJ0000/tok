// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Account        *account
	Collection     *collection
	Comment        *comment
	File           *file
	Follow         *follow
	GooseDbVersion *gooseDbVersion
	Template       *template
	User           *user
	Video          *video
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	Collection = &Q.Collection
	Comment = &Q.Comment
	File = &Q.File
	Follow = &Q.Follow
	GooseDbVersion = &Q.GooseDbVersion
	Template = &Q.Template
	User = &Q.User
	Video = &Q.Video
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Account:        newAccount(db, opts...),
		Collection:     newCollection(db, opts...),
		Comment:        newComment(db, opts...),
		File:           newFile(db, opts...),
		Follow:         newFollow(db, opts...),
		GooseDbVersion: newGooseDbVersion(db, opts...),
		Template:       newTemplate(db, opts...),
		User:           newUser(db, opts...),
		Video:          newVideo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account        account
	Collection     collection
	Comment        comment
	File           file
	Follow         follow
	GooseDbVersion gooseDbVersion
	Template       template
	User           user
	Video          video
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Account:        q.Account.clone(db),
		Collection:     q.Collection.clone(db),
		Comment:        q.Comment.clone(db),
		File:           q.File.clone(db),
		Follow:         q.Follow.clone(db),
		GooseDbVersion: q.GooseDbVersion.clone(db),
		Template:       q.Template.clone(db),
		User:           q.User.clone(db),
		Video:          q.Video.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Account:        q.Account.replaceDB(db),
		Collection:     q.Collection.replaceDB(db),
		Comment:        q.Comment.replaceDB(db),
		File:           q.File.replaceDB(db),
		Follow:         q.Follow.replaceDB(db),
		GooseDbVersion: q.GooseDbVersion.replaceDB(db),
		Template:       q.Template.replaceDB(db),
		User:           q.User.replaceDB(db),
		Video:          q.Video.replaceDB(db),
	}
}

type queryCtx struct {
	Account        IAccountDo
	Collection     ICollectionDo
	Comment        ICommentDo
	File           IFileDo
	Follow         IFollowDo
	GooseDbVersion IGooseDbVersionDo
	Template       ITemplateDo
	User           IUserDo
	Video          IVideoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:        q.Account.WithContext(ctx),
		Collection:     q.Collection.WithContext(ctx),
		Comment:        q.Comment.WithContext(ctx),
		File:           q.File.WithContext(ctx),
		Follow:         q.Follow.WithContext(ctx),
		GooseDbVersion: q.GooseDbVersion.WithContext(ctx),
		Template:       q.Template.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		Video:          q.Video.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
