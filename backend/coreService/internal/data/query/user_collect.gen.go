// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/LXJ0000/tok/backend/coreService/internal/data/model"
)

func newUserCollect(db *gorm.DB, opts ...gen.DOOption) userCollect {
	_userCollect := userCollect{}

	_userCollect.userCollectDo.UseDB(db, opts...)
	_userCollect.userCollectDo.UseModel(&model.UserCollect{})

	tableName := _userCollect.userCollectDo.TableName()
	_userCollect.ALL = field.NewAsterisk(tableName)
	_userCollect.ID = field.NewInt64(tableName, "id")
	_userCollect.UserID = field.NewInt64(tableName, "user_id")
	_userCollect.BizID = field.NewInt64(tableName, "biz_id")
	_userCollect.Biz = field.NewString(tableName, "biz")
	_userCollect.CollectionID = field.NewInt64(tableName, "collection_id")
	_userCollect.Status = field.NewBool(tableName, "status")
	_userCollect.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_userCollect.CreateTime = field.NewTime(tableName, "create_time")
	_userCollect.UpdateTime = field.NewTime(tableName, "update_time")

	_userCollect.fillFieldMap()

	return _userCollect
}

type userCollect struct {
	userCollectDo

	ALL          field.Asterisk
	ID           field.Int64
	UserID       field.Int64
	BizID        field.Int64
	Biz          field.String
	CollectionID field.Int64
	Status       field.Bool  // 0=不收藏 1=收藏
	IsDeleted    field.Int32 // 是否删除
	CreateTime   field.Time  // 创建时间
	UpdateTime   field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (u userCollect) Table(newTableName string) *userCollect {
	u.userCollectDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCollect) As(alias string) *userCollect {
	u.userCollectDo.DO = *(u.userCollectDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCollect) updateTableName(table string) *userCollect {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.BizID = field.NewInt64(table, "biz_id")
	u.Biz = field.NewString(table, "biz")
	u.CollectionID = field.NewInt64(table, "collection_id")
	u.Status = field.NewBool(table, "status")
	u.IsDeleted = field.NewInt32(table, "is_deleted")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userCollect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCollect) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["biz_id"] = u.BizID
	u.fieldMap["biz"] = u.Biz
	u.fieldMap["collection_id"] = u.CollectionID
	u.fieldMap["status"] = u.Status
	u.fieldMap["is_deleted"] = u.IsDeleted
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userCollect) clone(db *gorm.DB) userCollect {
	u.userCollectDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCollect) replaceDB(db *gorm.DB) userCollect {
	u.userCollectDo.ReplaceDB(db)
	return u
}

type userCollectDo struct{ gen.DO }

type IUserCollectDo interface {
	gen.SubQuery
	Debug() IUserCollectDo
	WithContext(ctx context.Context) IUserCollectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCollectDo
	WriteDB() IUserCollectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCollectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCollectDo
	Not(conds ...gen.Condition) IUserCollectDo
	Or(conds ...gen.Condition) IUserCollectDo
	Select(conds ...field.Expr) IUserCollectDo
	Where(conds ...gen.Condition) IUserCollectDo
	Order(conds ...field.Expr) IUserCollectDo
	Distinct(cols ...field.Expr) IUserCollectDo
	Omit(cols ...field.Expr) IUserCollectDo
	Join(table schema.Tabler, on ...field.Expr) IUserCollectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCollectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCollectDo
	Group(cols ...field.Expr) IUserCollectDo
	Having(conds ...gen.Condition) IUserCollectDo
	Limit(limit int) IUserCollectDo
	Offset(offset int) IUserCollectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCollectDo
	Unscoped() IUserCollectDo
	Create(values ...*model.UserCollect) error
	CreateInBatches(values []*model.UserCollect, batchSize int) error
	Save(values ...*model.UserCollect) error
	First() (*model.UserCollect, error)
	Take() (*model.UserCollect, error)
	Last() (*model.UserCollect, error)
	Find() ([]*model.UserCollect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCollect, err error)
	FindInBatches(result *[]*model.UserCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCollect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCollectDo
	Assign(attrs ...field.AssignExpr) IUserCollectDo
	Joins(fields ...field.RelationField) IUserCollectDo
	Preload(fields ...field.RelationField) IUserCollectDo
	FirstOrInit() (*model.UserCollect, error)
	FirstOrCreate() (*model.UserCollect, error)
	FindByPage(offset int, limit int) (result []*model.UserCollect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCollectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCollectDo) Debug() IUserCollectDo {
	return u.withDO(u.DO.Debug())
}

func (u userCollectDo) WithContext(ctx context.Context) IUserCollectDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCollectDo) ReadDB() IUserCollectDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCollectDo) WriteDB() IUserCollectDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCollectDo) Session(config *gorm.Session) IUserCollectDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCollectDo) Clauses(conds ...clause.Expression) IUserCollectDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCollectDo) Returning(value interface{}, columns ...string) IUserCollectDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCollectDo) Not(conds ...gen.Condition) IUserCollectDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCollectDo) Or(conds ...gen.Condition) IUserCollectDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCollectDo) Select(conds ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCollectDo) Where(conds ...gen.Condition) IUserCollectDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCollectDo) Order(conds ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCollectDo) Distinct(cols ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCollectDo) Omit(cols ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCollectDo) Join(table schema.Tabler, on ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCollectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCollectDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCollectDo) Group(cols ...field.Expr) IUserCollectDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCollectDo) Having(conds ...gen.Condition) IUserCollectDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCollectDo) Limit(limit int) IUserCollectDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCollectDo) Offset(offset int) IUserCollectDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCollectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCollectDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCollectDo) Unscoped() IUserCollectDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCollectDo) Create(values ...*model.UserCollect) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCollectDo) CreateInBatches(values []*model.UserCollect, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCollectDo) Save(values ...*model.UserCollect) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCollectDo) First() (*model.UserCollect, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) Take() (*model.UserCollect, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) Last() (*model.UserCollect, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) Find() ([]*model.UserCollect, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCollect), err
}

func (u userCollectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCollect, err error) {
	buf := make([]*model.UserCollect, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCollectDo) FindInBatches(result *[]*model.UserCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCollectDo) Attrs(attrs ...field.AssignExpr) IUserCollectDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCollectDo) Assign(attrs ...field.AssignExpr) IUserCollectDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCollectDo) Joins(fields ...field.RelationField) IUserCollectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCollectDo) Preload(fields ...field.RelationField) IUserCollectDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCollectDo) FirstOrInit() (*model.UserCollect, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) FirstOrCreate() (*model.UserCollect, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollect), nil
	}
}

func (u userCollectDo) FindByPage(offset int, limit int) (result []*model.UserCollect, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCollectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCollectDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCollectDo) Delete(models ...*model.UserCollect) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCollectDo) withDO(do gen.Dao) *userCollectDo {
	u.DO = *do.(*gen.DO)
	return u
}
