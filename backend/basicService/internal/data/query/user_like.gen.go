// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/LXJ0000/tok/backend/basicService/internal/data/model"
)

func newUserLike(db *gorm.DB, opts ...gen.DOOption) userLike {
	_userLike := userLike{}

	_userLike.userLikeDo.UseDB(db, opts...)
	_userLike.userLikeDo.UseModel(&model.UserLike{})

	tableName := _userLike.userLikeDo.TableName()
	_userLike.ALL = field.NewAsterisk(tableName)
	_userLike.ID = field.NewInt64(tableName, "id")
	_userLike.UserID = field.NewInt64(tableName, "user_id")
	_userLike.BizID = field.NewInt64(tableName, "biz_id")
	_userLike.Biz = field.NewString(tableName, "biz")
	_userLike.Status = field.NewBool(tableName, "status")
	_userLike.IsDeleted = field.NewInt32(tableName, "is_deleted")
	_userLike.CreateTime = field.NewTime(tableName, "create_time")
	_userLike.UpdateTime = field.NewTime(tableName, "update_time")

	_userLike.fillFieldMap()

	return _userLike
}

type userLike struct {
	userLikeDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	BizID      field.Int64
	Biz        field.String
	Status     field.Bool  // 0=不点赞 1=点赞
	IsDeleted  field.Int32 // 是否删除
	CreateTime field.Time  // 创建时间
	UpdateTime field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (u userLike) Table(newTableName string) *userLike {
	u.userLikeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLike) As(alias string) *userLike {
	u.userLikeDo.DO = *(u.userLikeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLike) updateTableName(table string) *userLike {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.BizID = field.NewInt64(table, "biz_id")
	u.Biz = field.NewString(table, "biz")
	u.Status = field.NewBool(table, "status")
	u.IsDeleted = field.NewInt32(table, "is_deleted")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLike) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["biz_id"] = u.BizID
	u.fieldMap["biz"] = u.Biz
	u.fieldMap["status"] = u.Status
	u.fieldMap["is_deleted"] = u.IsDeleted
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userLike) clone(db *gorm.DB) userLike {
	u.userLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLike) replaceDB(db *gorm.DB) userLike {
	u.userLikeDo.ReplaceDB(db)
	return u
}

type userLikeDo struct{ gen.DO }

type IUserLikeDo interface {
	gen.SubQuery
	Debug() IUserLikeDo
	WithContext(ctx context.Context) IUserLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLikeDo
	WriteDB() IUserLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLikeDo
	Not(conds ...gen.Condition) IUserLikeDo
	Or(conds ...gen.Condition) IUserLikeDo
	Select(conds ...field.Expr) IUserLikeDo
	Where(conds ...gen.Condition) IUserLikeDo
	Order(conds ...field.Expr) IUserLikeDo
	Distinct(cols ...field.Expr) IUserLikeDo
	Omit(cols ...field.Expr) IUserLikeDo
	Join(table schema.Tabler, on ...field.Expr) IUserLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLikeDo
	Group(cols ...field.Expr) IUserLikeDo
	Having(conds ...gen.Condition) IUserLikeDo
	Limit(limit int) IUserLikeDo
	Offset(offset int) IUserLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLikeDo
	Unscoped() IUserLikeDo
	Create(values ...*model.UserLike) error
	CreateInBatches(values []*model.UserLike, batchSize int) error
	Save(values ...*model.UserLike) error
	First() (*model.UserLike, error)
	Take() (*model.UserLike, error)
	Last() (*model.UserLike, error)
	Find() ([]*model.UserLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLike, err error)
	FindInBatches(result *[]*model.UserLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLikeDo
	Assign(attrs ...field.AssignExpr) IUserLikeDo
	Joins(fields ...field.RelationField) IUserLikeDo
	Preload(fields ...field.RelationField) IUserLikeDo
	FirstOrInit() (*model.UserLike, error)
	FirstOrCreate() (*model.UserLike, error)
	FindByPage(offset int, limit int) (result []*model.UserLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLikeDo) Debug() IUserLikeDo {
	return u.withDO(u.DO.Debug())
}

func (u userLikeDo) WithContext(ctx context.Context) IUserLikeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLikeDo) ReadDB() IUserLikeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLikeDo) WriteDB() IUserLikeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLikeDo) Session(config *gorm.Session) IUserLikeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLikeDo) Clauses(conds ...clause.Expression) IUserLikeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLikeDo) Returning(value interface{}, columns ...string) IUserLikeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLikeDo) Not(conds ...gen.Condition) IUserLikeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLikeDo) Or(conds ...gen.Condition) IUserLikeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLikeDo) Select(conds ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLikeDo) Where(conds ...gen.Condition) IUserLikeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLikeDo) Order(conds ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLikeDo) Distinct(cols ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLikeDo) Omit(cols ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLikeDo) Join(table schema.Tabler, on ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLikeDo) Group(cols ...field.Expr) IUserLikeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLikeDo) Having(conds ...gen.Condition) IUserLikeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLikeDo) Limit(limit int) IUserLikeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLikeDo) Offset(offset int) IUserLikeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLikeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLikeDo) Unscoped() IUserLikeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLikeDo) Create(values ...*model.UserLike) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLikeDo) CreateInBatches(values []*model.UserLike, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLikeDo) Save(values ...*model.UserLike) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLikeDo) First() (*model.UserLike, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLike), nil
	}
}

func (u userLikeDo) Take() (*model.UserLike, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLike), nil
	}
}

func (u userLikeDo) Last() (*model.UserLike, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLike), nil
	}
}

func (u userLikeDo) Find() ([]*model.UserLike, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLike), err
}

func (u userLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLike, err error) {
	buf := make([]*model.UserLike, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLikeDo) FindInBatches(result *[]*model.UserLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLikeDo) Attrs(attrs ...field.AssignExpr) IUserLikeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLikeDo) Assign(attrs ...field.AssignExpr) IUserLikeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLikeDo) Joins(fields ...field.RelationField) IUserLikeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLikeDo) Preload(fields ...field.RelationField) IUserLikeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLikeDo) FirstOrInit() (*model.UserLike, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLike), nil
	}
}

func (u userLikeDo) FirstOrCreate() (*model.UserLike, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLike), nil
	}
}

func (u userLikeDo) FindByPage(offset int, limit int) (result []*model.UserLike, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLikeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLikeDo) Delete(models ...*model.UserLike) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLikeDo) withDO(do gen.Dao) *userLikeDo {
	u.DO = *do.(*gen.DO)
	return u
}
